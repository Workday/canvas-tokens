{"version":3,"file":"TypeLevel-ed31934f.js","sources":["../../../../../packages/canvas-tokens-docs/stories/system/examples/TypeLevel.tsx"],"sourcesContent":["import * as React from 'react';\nimport {system} from '@workday/canvas-tokens-web';\nimport {TokenGrid, formatJSVar} from '../../../components/TokenGrid';\n\ninterface TypeLevelToken {\n  /** The name of the CSS class */\n  cssClass: string;\n  /** The formatted name of the JS variable */\n  jsVar: React.ReactNode;\n  /** The CSS var values for the CSS class */\n  values: string;\n  /** The formatted values for CSS Vars to render the type sample */\n  formattedValues: object;\n}\n\nfunction getCSSVarValue(varName: string) {\n  return getComputedStyle(document.documentElement).getPropertyValue(varName).replace(/\"/g, '');\n}\n\nfunction formatTypeLevelValues(values: object) {\n  let formattedValues = {};\n  for (const key in values) {\n    if (key in values) {\n      formattedValues = {...formattedValues, [key]: `var(${values[key as keyof typeof values]})`};\n    }\n  }\n  return formattedValues;\n}\n\nconst typeLevelTokens = Object.keys(system.type).reduce((acc, level) => {\n  const levelTokens = Object.entries(system.type[level as keyof typeof system.type]).map(\n    ([size, values]) => {\n      return {\n        cssClass: `.cnvs-sys-type-${level}-${size}`,\n        jsVar: formatJSVar(`system.type.${level}.${size}`),\n        values: values,\n        formattedValues: formatTypeLevelValues(values),\n      };\n    }\n  );\n  return acc.concat(levelTokens);\n}, [] as TypeLevelToken[]);\n\nexport function TypeLevelTokens() {\n  return (\n    <TokenGrid\n      caption=\"Type Level Tokens\"\n      headings={['Sample', 'CSS Class', 'JS Variable', 'CSS Variables (Values)']}\n      rows={typeLevelTokens}\n    >\n      {token => (\n        <>\n          <TokenGrid.RowItem>\n            <span style={{...token.formattedValues, fontFamily: 'var(--cnvs-base-font-family-50)'}}>\n              Canvas\n            </span>\n          </TokenGrid.RowItem>\n          <TokenGrid.RowItem>\n            <TokenGrid.MonospaceLabel>{token.cssClass}</TokenGrid.MonospaceLabel>\n          </TokenGrid.RowItem>\n          <TokenGrid.RowItem>\n            <TokenGrid.MonospaceLabel>{token.jsVar}</TokenGrid.MonospaceLabel>\n          </TokenGrid.RowItem>\n          <TokenGrid.RowItem>\n            {Object.values(token.values).map((value, index) => (\n              <span key={index}>\n                {value} ({getCSSVarValue(value)})\n              </span>\n            ))}\n          </TokenGrid.RowItem>\n        </>\n      )}\n    </TokenGrid>\n  );\n}\n"],"names":["getCSSVarValue","varName","formatTypeLevelValues","values","formattedValues","key","typeLevelTokens","system.type","acc","level","levelTokens","size","formatJSVar","TypeLevelTokens","jsx","TokenGrid","jsxs","Fragment","token","value","index"],"mappings":"mJAeA,SAASA,EAAeC,EAAiB,CAChC,OAAA,iBAAiB,SAAS,eAAe,EAAE,iBAAiBA,CAAO,EAAE,QAAQ,KAAM,EAAE,CAC9F,CAEA,SAASC,EAAsBC,EAAgB,CAC7C,IAAIC,EAAkB,CAAA,EACtB,UAAWC,KAAOF,EACZE,KAAOF,IACSC,EAAA,CAAC,GAAGA,EAAiB,CAACC,CAAG,EAAG,OAAOF,EAAOE,CAA0B,CAAC,MAGpF,OAAAD,CACT,CAEA,MAAME,EAAkB,OAAO,KAAKC,CAAW,EAAE,OAAO,CAACC,EAAKC,IAAU,CACtE,MAAMC,EAAc,OAAO,QAAQH,EAAYE,CAAiC,CAAC,EAAE,IACjF,CAAC,CAACE,EAAMR,CAAM,KACL,CACL,SAAU,kBAAkBM,CAAK,IAAIE,CAAI,GACzC,MAAOC,EAAY,eAAeH,CAAK,IAAIE,CAAI,EAAE,EACjD,OAAAR,EACA,gBAAiBD,EAAsBC,CAAM,CAAA,EAEjD,EAEK,OAAAK,EAAI,OAAOE,CAAW,CAC/B,EAAG,CAAsB,CAAA,EAElB,SAASG,GAAkB,CAE9B,OAAAC,EAACC,EAAA,CACC,QAAQ,oBACR,SAAU,CAAC,SAAU,YAAa,cAAe,wBAAwB,EACzE,KAAMT,EAEL,YAEGU,EAAAC,EAAA,CAAA,SAAA,CAAAH,EAACC,EAAU,QAAV,CACC,SAAAD,EAAC,QAAK,MAAO,CAAC,GAAGI,EAAM,gBAAiB,WAAY,iCAAiC,EAAG,iBAExF,CAAA,EACF,EACAJ,EAACC,EAAU,QAAV,CACC,SAAAD,EAACC,EAAU,eAAV,CAA0B,SAAMG,EAAA,QAAA,CAAS,CAC5C,CAAA,EACAJ,EAACC,EAAU,QAAV,CACC,SAAAD,EAACC,EAAU,eAAV,CAA0B,SAAMG,EAAA,KAAA,CAAM,CACzC,CAAA,EACCJ,EAAAC,EAAU,QAAV,CACE,gBAAO,OAAOG,EAAM,MAAM,EAAE,IAAI,CAACC,EAAOC,MACtC,OACE,CAAA,SAAA,CAAAD,EAAM,KAAGnB,EAAemB,CAAK,EAAE,GAAA,GADvBC,CAEX,CACD,EACH,CAAA,EACF,CAAA,CAAA,CAIR"}