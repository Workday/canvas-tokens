{"version":3,"file":"Color-4a05843a.js","sources":["../../../../../packages/canvas-tokens-docs/stories/base/examples/Color.tsx"],"sourcesContent":["import * as React from 'react';\nimport {base} from '@workday/canvas-tokens-web';\n\nimport {Stack} from '../../../components/Stack';\nimport {ColorGrid, buildColorSwatch, ColorSwatch} from '../../../components/ColorGrid';\n\nconst colorPaletteNames = [\n  'berrySmoothie',\n  'blackPepper',\n  'blackberry',\n  'blueberry',\n  'cantaloupe',\n  'cappuccino',\n  'chiliMango',\n  'cinnamon',\n  'coconut',\n  'extendedDragonFruit',\n  'frenchVanilla',\n  'fruitPunch',\n  'grapeSoda',\n  'greenApple',\n  'islandPunch',\n  'jewel',\n  'juicyPear',\n  'kiwi',\n  'licorice',\n  'peach',\n  'plum',\n  'pomegranate',\n  'rootBeer',\n  'soap',\n  'sourLemon',\n  'toastedMarshmallow',\n  'toothpaste',\n  'watermelon',\n] as const;\n\nconst colorRegExp = new RegExp(colorPaletteNames.join('|'));\n\nfunction buildPalettes(tokens: object) {\n  const palettes: Record<string, ColorSwatch[]> = {};\n  for (const key in tokens) {\n    // If it's a color token\n    if (colorRegExp.test(key)) {\n      const name = key.replace(/\\d+/, '');\n      const swatch = buildColorSwatch(tokens[key as keyof typeof tokens], `base.${key}`);\n      if (name in palettes) {\n        palettes[name].push(swatch);\n      } else {\n        palettes[name] = [swatch];\n      }\n    }\n  }\n  return Object.entries(palettes);\n}\n\nconst baseColorPalettes = buildPalettes(base);\n\nexport const ColorTokens = () => {\n  return (\n    <Stack>\n      {baseColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n\nconst primaryPaletteNames = ['blueberry'];\nconst primaryColorPalettes = baseColorPalettes.filter(([name]) =>\n  primaryPaletteNames.includes(name)\n);\n\nexport const PrimaryColorTokens = () => {\n  return (\n    <Stack>\n      {primaryColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n\nconst neutralPaletteNames = ['blackPepper', 'licorice', 'soap', 'frenchVanilla'];\nconst neutralColorPalettes = baseColorPalettes.filter(([name]) =>\n  neutralPaletteNames.includes(name)\n);\n\nexport const NeutralColorTokens = () => {\n  return (\n    <Stack>\n      {neutralColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n\nconst typePaletteNames = ['blackPepper', 'licorice', 'frenchVanilla', 'blueberry'];\nconst typeColorPalettes = baseColorPalettes.filter(([name]) => typePaletteNames.includes(name));\n\nexport const TypeColorTokens = () => {\n  return (\n    <Stack>\n      {typeColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n\nconst statusPaletteNames = ['greenApple', 'cinnamon', 'cantaloupe'];\nconst statusColorPalettes = baseColorPalettes.filter(([name]) => statusPaletteNames.includes(name));\n\nexport const StatusColorTokens = () => {\n  return (\n    <Stack>\n      {statusColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n\nconst aiPaletteNames = ['extendedDragonFruit'];\nconst aiColorPalettes = baseColorPalettes.filter(([name]) => aiPaletteNames.includes(name));\n\nconst otherPaletteNames = primaryPaletteNames.concat(\n  neutralPaletteNames,\n  typePaletteNames,\n  statusPaletteNames,\n  aiPaletteNames\n);\nexport const AIColorTokens = () => {\n  return (\n    <Stack>\n      {aiColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n\nconst otherColorPalettes = baseColorPalettes.filter(([name]) => !otherPaletteNames.includes(name));\n\nexport const OtherColorTokens = () => {\n  return (\n    <Stack>\n      {otherColorPalettes.map(([name, palette]) => (\n        <ColorGrid key={name} name={name} palette={palette} />\n      ))}\n    </Stack>\n  );\n};\n"],"names":["colorPaletteNames","colorRegExp","buildPalettes","tokens","palettes","key","name","swatch","buildColorSwatch","baseColorPalettes","base","ColorTokens","jsx","Stack","palette","ColorGrid","primaryPaletteNames","primaryColorPalettes","PrimaryColorTokens","neutralPaletteNames","neutralColorPalettes","NeutralColorTokens","typePaletteNames","typeColorPalettes","TypeColorTokens","statusPaletteNames","statusColorPalettes","StatusColorTokens","aiPaletteNames","aiColorPalettes","otherPaletteNames","AIColorTokens","otherColorPalettes","OtherColorTokens"],"mappings":"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"}