{"version":3,"file":"Space-892815b0.js","sources":["../../../../../packages/canvas-tokens-docs/stories/system/examples/Space.tsx"],"sourcesContent":["import * as React from 'react';\nimport {base, system} from '@workday/canvas-tokens-web';\nimport {TokenGrid, formatJSVar} from '../../../components/TokenGrid';\n\ninterface SpaceToken {\n  /** The name of the CSS variable */\n  cssVar: string;\n  /** The formatted name of the JS variable */\n  jsVar: React.ReactNode;\n  /** The actual string value of the token */\n  value: string;\n  /** The value of the CSS token after calculating the base unit times the multiplier */\n  calculatedValue: string;\n  /** The value of the CSS token after converting rem to pixels */\n  pxValue: string;\n}\n\nfunction multiplyCalcValues(value: string) {\n  // Matches numbers such as .25, 0.25, or 25\n  const numberRegExp = new RegExp(/(0*\\.)?\\d+/g);\n  // Find the numbers in the string value\n  const matches = value.match(numberRegExp);\n  if (matches) {\n    // Multiply the matched values\n    return matches.reduce((acc, current) => acc * Number(current), 1);\n  }\n  // If none exist, return 0\n  return 0;\n}\n\nconst spaceTokens: SpaceToken[] = Object.entries(system.space).map(([key, varName]) => {\n  const value = getComputedStyle(document.documentElement).getPropertyValue(varName);\n  const calculatedValue = multiplyCalcValues(value);\n  return {\n    cssVar: varName,\n    jsVar: formatJSVar(`system.space.${key}`),\n    value,\n    calculatedValue: `${calculatedValue}rem`,\n    pxValue: `${calculatedValue * 16}px`,\n  };\n});\n\nexport function SpaceTokens() {\n  return (\n    <TokenGrid\n      caption=\"space tokens\"\n      headings={[\n        'Sample',\n        'CSS Variable',\n        'JS Variable',\n        'Value',\n        'Calculated Value',\n        'Pixel Value',\n      ]}\n      rows={spaceTokens}\n    >\n      {token => (\n        <>\n          <TokenGrid.RowItem>\n            <TokenGrid.Sample\n              style={{\n                width: `var(${token.cssVar})`,\n                backgroundColor: `var(${base.blueberry400})`,\n              }}\n            />\n          </TokenGrid.RowItem>\n          <TokenGrid.RowItem>\n            <TokenGrid.MonospaceLabel>{token.cssVar}</TokenGrid.MonospaceLabel>\n          </TokenGrid.RowItem>\n          <TokenGrid.RowItem>\n            <TokenGrid.MonospaceLabel>{token.jsVar}</TokenGrid.MonospaceLabel>\n          </TokenGrid.RowItem>\n          <TokenGrid.RowItem>{token.value}</TokenGrid.RowItem>\n          <TokenGrid.RowItem>{token.calculatedValue}</TokenGrid.RowItem>\n          <TokenGrid.RowItem>{token.pxValue}</TokenGrid.RowItem>\n        </>\n      )}\n    </TokenGrid>\n  );\n}\n"],"names":["multiplyCalcValues","value","numberRegExp","matches","acc","current","spaceTokens","system.space","key","varName","calculatedValue","formatJSVar","SpaceTokens","jsx","TokenGrid","jsxs","Fragment","token","base.blueberry400"],"mappings":"2LAiBA,SAASA,EAAmBC,EAAe,CAEnC,MAAAC,EAAe,IAAI,OAAO,aAAa,EAEvCC,EAAUF,EAAM,MAAMC,CAAY,EACxC,OAAIC,EAEKA,EAAQ,OAAO,CAACC,EAAKC,IAAYD,EAAM,OAAOC,CAAO,EAAG,CAAC,EAG3D,CACT,CAEA,MAAMC,EAA4B,OAAO,QAAQC,CAAY,EAAE,IAAI,CAAC,CAACC,EAAKC,CAAO,IAAM,CACrF,MAAMR,EAAQ,iBAAiB,SAAS,eAAe,EAAE,iBAAiBQ,CAAO,EAC3EC,EAAkBV,EAAmBC,CAAK,EACzC,MAAA,CACL,OAAQQ,EACR,MAAOE,EAAY,gBAAgBH,CAAG,EAAE,EACxC,MAAAP,EACA,gBAAiB,GAAGS,CAAe,MACnC,QAAS,GAAGA,EAAkB,EAAE,IAAA,CAEpC,CAAC,EAEM,SAASE,GAAc,CAE1B,OAAAC,EAACC,EAAA,CACC,QAAQ,eACR,SAAU,CACR,SACA,eACA,cACA,QACA,mBACA,aACF,EACA,KAAMR,EAEL,YAEGS,EAAAC,EAAA,CAAA,SAAA,CAACH,EAAAC,EAAU,QAAV,CACC,SAAAD,EAACC,EAAU,OAAV,CACC,MAAO,CACL,MAAO,OAAOG,EAAM,MAAM,IAC1B,gBAAiB,OAAOC,CAAiB,GAC3C,CAAA,CAAA,EAEJ,EACAL,EAACC,EAAU,QAAV,CACC,SAAAD,EAACC,EAAU,eAAV,CAA0B,SAAMG,EAAA,MAAA,CAAO,CAC1C,CAAA,EACAJ,EAACC,EAAU,QAAV,CACC,SAAAD,EAACC,EAAU,eAAV,CAA0B,SAAMG,EAAA,KAAA,CAAM,CACzC,CAAA,EACCJ,EAAAC,EAAU,QAAV,CAAmB,WAAM,MAAM,EAC/BD,EAAAC,EAAU,QAAV,CAAmB,WAAM,gBAAgB,EACzCD,EAAAC,EAAU,QAAV,CAAmB,WAAM,QAAQ,CAAA,EACpC,CAAA,CAAA,CAIR"}