{"version":3,"file":"ColorGrid-4f4d6ab1.js","sources":["../../../../../packages/canvas-tokens-docs/components/ColorGrid.tsx"],"sourcesContent":["import * as React from 'react';\nimport {TokenGrid, formatJSVar} from './TokenGrid';\n\nconst sortMap: Record<string, number> = {\n  softer: 0,\n  soft: 1,\n  default: 2,\n  strong: 3,\n  stronger: 4,\n};\n\nexport function sortSystemColorPalette(a: ColorSwatch, b: ColorSwatch) {\n  const aLevel = a.cssVar.split('-').at(-1) || '';\n  const bLevel = b.cssVar.split('-').at(-1) || '';\n  const first = aLevel in sortMap ? sortMap[aLevel] : Infinity;\n  const second = bLevel in sortMap ? sortMap[bLevel] : Infinity;\n  return first - second;\n}\n\nexport function buildPalette(prefix: string, tokens: Record<string, string>) {\n  return Object.entries(tokens).map(([value, varName]) =>\n    buildColorSwatch(varName, `${prefix}.${value}`)\n  );\n}\n\nexport function buildPaletteGroup(\n  prefix: string,\n  tokens: object,\n  sortFn?: (a: ColorSwatch, b: ColorSwatch) => number\n) {\n  return Object.entries(tokens)\n    .map(([key, value]) => {\n      if (typeof value === 'string') {\n        return buildColorSwatch(value, `${prefix}.${key}`);\n      } else {\n        const palette = buildPalette(`${prefix}.${key}`, value);\n        if (sortFn) {\n          return palette.sort(sortFn);\n        }\n        return palette;\n      }\n    })\n    .flat();\n}\n\nexport interface ColorSwatch {\n  /** The name of the CSS variable */\n  cssVar: string;\n  /** The formatted name of the JS variable */\n  jsVar: React.ReactNode;\n  /** The actual string value of the token */\n  value: string;\n}\n\n/** builds color swatch objects for ColorGrid */\nexport function buildColorSwatch(varName: string, jsVarName: string): ColorSwatch {\n  // Get the CSS var's value from the :root element\n  const value = getComputedStyle(document.documentElement).getPropertyValue(varName);\n  return {\n    value,\n    cssVar: varName,\n    jsVar: formatJSVar(jsVarName),\n  };\n}\n\ntype VariableType = 'css' | 'javascript' | 'all';\n\ninterface ColorGridProps {\n  name: string;\n  palette: ColorSwatch[];\n  variableType?: VariableType;\n}\n\n/** transform 'camelCase' names into 'spaced case' */\nfunction formatName(name: string) {\n  return name\n    .split(/(?=[A-Z])/)\n    .join(' ')\n    .toLowerCase();\n}\n\nfunction getSwatchStyles(token: ColorSwatch) {\n  // update the property to support linear gradients\n  // which need to be a background image instead of background color\n  const property = token.value.startsWith('linear-gradient(')\n    ? 'backgroundImage'\n    : 'backgroundColor';\n  return {[property]: `var(${token.cssVar})`};\n}\n\nfunction getHeadings(type: VariableType) {\n  const defaultHeadings = ['Swatch', 'Value'];\n  if (type === 'css') {\n    defaultHeadings.splice(1, 0, 'CSS Variable');\n  } else if (type === 'javascript') {\n    defaultHeadings.splice(1, 0, 'JS Variable');\n  } else {\n    defaultHeadings.splice(1, 0, 'CSS Variable', 'JS Variable');\n  }\n  return defaultHeadings;\n}\n\n/** A configuration of TokenGrid to quickly build tables for colors */\nexport function ColorGrid({name, variableType = 'all', palette}: ColorGridProps) {\n  return (\n    <TokenGrid caption={formatName(name)} headings={getHeadings(variableType)} rows={palette}>\n      {token => (\n        <>\n          <TokenGrid.RowItem>\n            <TokenGrid.Swatch style={getSwatchStyles(token)} />\n          </TokenGrid.RowItem>\n          {variableType === 'css' ||\n            ('all' && (\n              <TokenGrid.RowItem>\n                <TokenGrid.MonospaceLabel>{token.cssVar}</TokenGrid.MonospaceLabel>\n              </TokenGrid.RowItem>\n            ))}\n          {variableType === 'javascript' ||\n            ('all' && (\n              <TokenGrid.RowItem>\n                <TokenGrid.MonospaceLabel>{token.jsVar}</TokenGrid.MonospaceLabel>\n              </TokenGrid.RowItem>\n            ))}\n          <TokenGrid.RowItem>\n            <span>{token.value}</span>\n          </TokenGrid.RowItem>\n        </>\n      )}\n    </TokenGrid>\n  );\n}\n"],"names":["sortMap","sortSystemColorPalette","a","b","aLevel","bLevel","first","second","buildPalette","prefix","tokens","value","varName","buildColorSwatch","buildPaletteGroup","sortFn","key","palette","jsVarName","formatJSVar","formatName","name","getSwatchStyles","token","getHeadings","type","defaultHeadings","ColorGrid","variableType","jsx","TokenGrid","jsxs","Fragment"],"mappings":"sGAGA,MAAAA,EAAA,CAAwC,OAAA,EAC9B,KAAA,EACF,QAAA,EACG,OAAA,EACD,SAAA,CAEV,EAEO,SAAAC,EAAAC,EAAAC,EAAA,CACL,MAAAC,EAAAF,EAAA,OAAA,MAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACAG,EAAAF,EAAA,OAAA,MAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GACAG,EAAAF,KAAAJ,EAAAA,EAAAI,CAAA,EAAA,IACAG,EAAAF,KAAAL,EAAAA,EAAAK,CAAA,EAAA,IACA,OAAAC,EAAAC,CACF,CAEO,SAAAC,EAAAC,EAAAC,EAAA,CACL,OAAA,OAAA,QAAAA,CAAA,EAAA,IAA8B,CAAA,CAAAC,EAAAC,CAAA,IAAAC,EAAAD,EAAA,GAAAH,CAAA,IAAAE,CAAA,EAAA,CACkB,CAElD,CAEO,SAAAG,EAAAL,EAAAC,EAAAK,EAAA,CAKL,OAAA,OAAA,QAAAL,CAAA,EAAA,IAAA,CAAA,CAAAM,EAAAL,CAAA,IAAA,CAEI,GAAA,OAAAA,GAAA,SACE,OAAAE,EAAAF,EAAA,GAAAF,CAAA,IAAAO,CAAA,EAAA,EAAiD,CAEjD,MAAAC,EAAAT,EAAA,GAAAC,CAAA,IAAAO,CAAA,GAAAL,CAAA,EACA,OAAAI,EACEE,EAAA,KAAAF,CAAA,EAEFE,CAAO,CACT,CAAA,EAAA,KAAA,CAGN,CAYO,SAAAJ,EAAAD,EAAAM,EAAA,CAGL,MAAA,CAAO,MADP,iBAAA,SAAA,eAAA,EAAA,iBAAAN,CAAA,EAEE,OAAAA,EACQ,MAAAO,EAAAD,CAAA,CACoB,CAEhC,CAWA,SAAAE,EAAAC,EAAA,CACE,OAAAA,EAAA,MAAA,WAAA,EAAA,KAAA,GAAA,EAAA,aAIF,CAEA,SAAAC,EAAAC,EAAA,CAME,MAAA,CAAA,CAHAA,EAAA,MAAA,WAAA,kBAAA,EAAA,kBAAA,iBAGA,EAAA,OAAAA,EAAA,MAAA,IACF,CAEA,SAAAC,EAAAC,EAAA,CACE,MAAAC,EAAA,CAAA,SAAA,OAAA,EACA,OAAAD,IAAA,MACEC,EAAA,OAAA,EAAA,EAAA,cAAA,EAA2CD,IAAA,aAE3CC,EAAA,OAAA,EAAA,EAAA,aAAA,EAEAA,EAAA,OAAA,EAAA,EAAA,eAAA,aAAA,EAEFA,CACF,CAGO,SAAAC,EAAA,CAAA,KAAAN,EAAA,aAAAO,EAAA,MAAA,QAAAX,CAAA,EAAA,CACL,OAAAY,EAAAC,EAAA,CAAA,QAAAV,EAAAC,CAAA,EAAA,SAAAG,EAAAI,CAAA,EAAA,KAAAX,EAAA,SAAAM,GAAAQ,EAAAC,EAAA,CAAA,SAAA,CAIQH,EAAAC,EAAA,QAAA,CAAA,SAAAD,EAAAC,EAAA,OAAA,CAAA,MAAAR,EAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,EAEAK,IAAA,OAAAC,EAAAC,EAAA,QAAA,CAAA,SAAAD,EAAAC,EAAA,eAAA,CAAA,SAAAP,EAAA,MAAA,CAAA,CAAA,CAAA,EAKIK,IAAA,cAAAC,EAAAC,EAAA,QAAA,CAAA,SAAAD,EAAAC,EAAA,eAAA,CAAA,SAAAP,EAAA,KAAA,CAAA,CAAA,CAAA,EAMAM,EAAAC,EAAA,QAAA,CAAA,SAAAD,EAAA,OAAA,CAAA,SAAAN,EAAA,KAAA,CAAA,CAAA,CAAA,CAIJ,CAAA,CAAA,CAAA,CAAA,CAKV"}